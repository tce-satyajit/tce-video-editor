{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/satyajitpujari/projects/ce6/tce-video-editor/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\n/* eslint-disable no-undef */\nconst resolveURL = require('resolve-url');\n\nconst {\n  log\n} = require('../utils/log');\n/*\n * Fetch data from remote URL and convert to blob URL\n * to avoid CORS issue\n */\n\n\nconst toBlobURL = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (url, mimeType) {\n    log('info', `fetch ${url}`);\n    const buf = yield (yield fetch(url)).arrayBuffer();\n    log('info', `${url} file size = ${buf.byteLength} bytes`);\n    const blob = new Blob([buf], {\n      type: mimeType\n    });\n    const blobURL = URL.createObjectURL(blob);\n    log('info', `${url} blob URL = ${blobURL}`);\n    return blobURL;\n  });\n\n  return function toBlobURL(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* ({\n    corePath: _corePath\n  }) {\n    if (typeof _corePath !== 'string') {\n      throw Error('corePath should be a string!');\n    }\n\n    const coreRemotePath = resolveURL(_corePath);\n    const corePath = yield toBlobURL(coreRemotePath, 'application/javascript');\n    const wasmPath = yield toBlobURL(coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'), 'application/wasm');\n    const workerPath = yield toBlobURL(coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'), 'application/javascript');\n\n    if (typeof createFFmpegCore === 'undefined') {\n      return new Promise(resolve => {\n        const script = document.createElement('script');\n\n        const eventHandler = () => {\n          script.removeEventListener('load', eventHandler);\n          log('info', 'ffmpeg-core.js script loaded');\n          resolve({\n            createFFmpegCore,\n            corePath,\n            wasmPath,\n            workerPath\n          });\n        };\n\n        script.src = corePath;\n        script.type = 'text/javascript';\n        script.addEventListener('load', eventHandler);\n        document.getElementsByTagName('head')[0].appendChild(script);\n      });\n    }\n\n    log('info', 'ffmpeg-core.js script is loaded already');\n    return Promise.resolve({\n      createFFmpegCore,\n      corePath,\n      wasmPath,\n      workerPath\n    });\n  });\n\n  return function (_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/satyajitpujari/projects/ce6/tce-video-editor/node_modules/@ffmpeg/ffmpeg/src/browser/getCreateFFmpegCore.js"],"names":["resolveURL","require","log","toBlobURL","url","mimeType","buf","fetch","arrayBuffer","byteLength","blob","Blob","type","blobURL","URL","createObjectURL","module","exports","corePath","_corePath","Error","coreRemotePath","wasmPath","replace","workerPath","createFFmpegCore","Promise","resolve","script","document","createElement","eventHandler","removeEventListener","src","addEventListener","getElementsByTagName","appendChild"],"mappings":";;AAAA;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,cAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACA,MAAME,SAAS;AAAA,+BAAG,WAAOC,GAAP,EAAYC,QAAZ,EAAyB;AACzCH,IAAAA,GAAG,CAAC,MAAD,EAAU,SAAQE,GAAI,EAAtB,CAAH;AACA,UAAME,GAAG,SAAS,OAAOC,KAAK,CAACH,GAAD,CAAZ,EAAmBI,WAAnB,EAAlB;AACAN,IAAAA,GAAG,CAAC,MAAD,EAAU,GAAEE,GAAI,gBAAeE,GAAG,CAACG,UAAW,QAA9C,CAAH;AACA,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACL,GAAD,CAAT,EAAgB;AAAEM,MAAAA,IAAI,EAAEP;AAAR,KAAhB,CAAb;AACA,UAAMQ,OAAO,GAAGC,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CAAhB;AACAR,IAAAA,GAAG,CAAC,MAAD,EAAU,GAAEE,GAAI,eAAcS,OAAQ,EAAtC,CAAH;AACA,WAAOA,OAAP;AACD,GARc;;AAAA,kBAATV,SAAS;AAAA;AAAA;AAAA,GAAf;;AAUAa,MAAM,CAACC,OAAP;AAAA,gCAAiB,WAAO;AAAEC,IAAAA,QAAQ,EAAEC;AAAZ,GAAP,EAAmC;AAClD,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,YAAMC,KAAK,CAAC,8BAAD,CAAX;AACD;;AACD,UAAMC,cAAc,GAAGrB,UAAU,CAACmB,SAAD,CAAjC;AACA,UAAMD,QAAQ,SAASf,SAAS,CAC9BkB,cAD8B,EAE9B,wBAF8B,CAAhC;AAIA,UAAMC,QAAQ,SAASnB,SAAS,CAC9BkB,cAAc,CAACE,OAAf,CAAuB,gBAAvB,EAAyC,kBAAzC,CAD8B,EAE9B,kBAF8B,CAAhC;AAIA,UAAMC,UAAU,SAASrB,SAAS,CAChCkB,cAAc,CAACE,OAAf,CAAuB,gBAAvB,EAAyC,uBAAzC,CADgC,EAEhC,wBAFgC,CAAlC;;AAIA,QAAI,OAAOE,gBAAP,KAA4B,WAAhC,EAA6C;AAC3C,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,cAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;;AACA,cAAMC,YAAY,GAAG,MAAM;AACzBH,UAAAA,MAAM,CAACI,mBAAP,CAA2B,MAA3B,EAAmCD,YAAnC;AACA7B,UAAAA,GAAG,CAAC,MAAD,EAAS,8BAAT,CAAH;AACAyB,UAAAA,OAAO,CAAC;AACNF,YAAAA,gBADM;AAENP,YAAAA,QAFM;AAGNI,YAAAA,QAHM;AAINE,YAAAA;AAJM,WAAD,CAAP;AAMD,SATD;;AAUAI,QAAAA,MAAM,CAACK,GAAP,GAAaf,QAAb;AACAU,QAAAA,MAAM,CAAChB,IAAP,GAAc,iBAAd;AACAgB,QAAAA,MAAM,CAACM,gBAAP,CAAwB,MAAxB,EAAgCH,YAAhC;AACAF,QAAAA,QAAQ,CAACM,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,WAAzC,CAAqDR,MAArD;AACD,OAhBM,CAAP;AAiBD;;AACD1B,IAAAA,GAAG,CAAC,MAAD,EAAS,yCAAT,CAAH;AACA,WAAOwB,OAAO,CAACC,OAAR,CAAgB;AACrBF,MAAAA,gBADqB;AAErBP,MAAAA,QAFqB;AAGrBI,MAAAA,QAHqB;AAIrBE,MAAAA;AAJqB,KAAhB,CAAP;AAMD,GA3CD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* eslint-disable no-undef */\nconst resolveURL = require('resolve-url');\nconst { log } = require('../utils/log');\n\n/*\n * Fetch data from remote URL and convert to blob URL\n * to avoid CORS issue\n */\nconst toBlobURL = async (url, mimeType) => {\n  log('info', `fetch ${url}`);\n  const buf = await (await fetch(url)).arrayBuffer();\n  log('info', `${url} file size = ${buf.byteLength} bytes`);\n  const blob = new Blob([buf], { type: mimeType });\n  const blobURL = URL.createObjectURL(blob);\n  log('info', `${url} blob URL = ${blobURL}`);\n  return blobURL;\n};\n\nmodule.exports = async ({ corePath: _corePath }) => {\n  if (typeof _corePath !== 'string') {\n    throw Error('corePath should be a string!');\n  }\n  const coreRemotePath = resolveURL(_corePath);\n  const corePath = await toBlobURL(\n    coreRemotePath,\n    'application/javascript',\n  );\n  const wasmPath = await toBlobURL(\n    coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'),\n    'application/wasm',\n  );\n  const workerPath = await toBlobURL(\n    coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'),\n    'application/javascript',\n  );\n  if (typeof createFFmpegCore === 'undefined') {\n    return new Promise((resolve) => {\n      const script = document.createElement('script');\n      const eventHandler = () => {\n        script.removeEventListener('load', eventHandler);\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath,\n        });\n      };\n      script.src = corePath;\n      script.type = 'text/javascript';\n      script.addEventListener('load', eventHandler);\n      document.getElementsByTagName('head')[0].appendChild(script);\n    });\n  }\n  log('info', 'ffmpeg-core.js script is loaded already');\n  return Promise.resolve({\n    createFFmpegCore,\n    corePath,\n    wasmPath,\n    workerPath,\n  });\n};\n"]},"metadata":{},"sourceType":"script"}