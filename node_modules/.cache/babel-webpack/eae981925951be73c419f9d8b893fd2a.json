{"ast":null,"code":"import _asyncToGenerator from \"/Users/satyajitpujari/projects/ce6/tce-video-editor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createFFmpeg } from '@ffmpeg/ffmpeg';\nimport * as i0 from \"@angular/core\";\nexport class FfmpegService {\n  constructor() {\n    this.isReady = false;\n    this.ffmpeg = createFFmpeg({\n      log: true\n    });\n  }\n\n  loadFFmpeg() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.isReady) {\n        yield _this.ffmpeg.load();\n        _this.isReady = true;\n      }\n    })();\n  }\n\n  trimVideo(file, startTime, endTime) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.loadFFmpeg();\n      const data = yield file.arrayBuffer();\n\n      _this2.ffmpeg.FS('writeFile', 'input.mp4', new Uint8Array(data));\n\n      yield _this2.ffmpeg.run('-i', 'input.mp4', '-ss', `${startTime}`, '-to', `${endTime}`, '-c', 'copy', 'output.mp4');\n\n      const outputData = _this2.ffmpeg.FS('readFile', 'output.mp4');\n\n      const outputBlob = new Blob([outputData.buffer], {\n        type: 'video/mp4'\n      });\n      return outputBlob;\n    })();\n  }\n\n}\n\nFfmpegService.ɵfac = function FfmpegService_Factory(t) {\n  return new (t || FfmpegService)();\n};\n\nFfmpegService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FfmpegService,\n  factory: FfmpegService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/satyajitpujari/projects/ce6/tce-video-editor/src/app/services/ffmpeg.service.ts"],"names":[],"mappings":";AACA,SAAS,YAAT,QAAqC,gBAArC;;AAKA,OAAM,MAAO,aAAP,CAAoB;AAIxB,EAAA,WAAA,GAAA;AAFA,SAAA,OAAA,GAAU,KAAV;AAGE,SAAK,MAAL,GAAc,YAAY,CAAC;AAAE,MAAA,GAAG,EAAE;AAAP,KAAD,CAA1B;AACD;;AAEK,EAAA,UAAU,GAAA;AAAA;;AAAA;AACd,UAAI,CAAC,KAAI,CAAC,OAAV,EAAmB;AACjB,cAAM,KAAI,CAAC,MAAL,CAAY,IAAZ,EAAN;AACA,QAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AACD;AAJa;AAKf;;AAEK,EAAA,SAAS,CAAC,IAAD,EAAa,SAAb,EAAgC,OAAhC,EAA+C;AAAA;;AAAA;AAC5D,YAAM,MAAI,CAAC,UAAL,EAAN;AAGA,YAAM,IAAI,SAAS,IAAI,CAAC,WAAL,EAAnB;;AACA,MAAA,MAAI,CAAC,MAAL,CAAY,EAAZ,CAAe,WAAf,EAA4B,WAA5B,EAAyC,IAAI,UAAJ,CAAe,IAAf,CAAzC;;AAGA,YAAM,MAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,IAAhB,EAAsB,WAAtB,EAAmC,KAAnC,EAA0C,GAAG,SAAS,EAAtD,EAA0D,KAA1D,EAAiE,GAAG,OAAO,EAA3E,EAA+E,IAA/E,EAAqF,MAArF,EAA6F,YAA7F,CAAN;;AAGA,YAAM,UAAU,GAAG,MAAI,CAAC,MAAL,CAAY,EAAZ,CAAe,UAAf,EAA2B,YAA3B,CAAnB;;AACA,YAAM,UAAU,GAAG,IAAI,IAAJ,CAAS,CAAC,UAAU,CAAC,MAAZ,CAAT,EAA8B;AAAE,QAAA,IAAI,EAAE;AAAR,OAA9B,CAAnB;AAEA,aAAO,UAAP;AAd4D;AAe7D;;AA9BuB;;;mBAAb,a;AAAa,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { createFFmpeg, FFmpeg } from '@ffmpeg/ffmpeg';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FfmpegService {\n  private ffmpeg: FFmpeg;\n  isReady = false;\n\n  constructor() {\n    this.ffmpeg = createFFmpeg({ log: true });\n  }\n\n  async loadFFmpeg() {\n    if (!this.isReady) {\n      await this.ffmpeg.load();\n      this.isReady = true;\n    }\n  }\n\n  async trimVideo(file: File, startTime: number, endTime: number): Promise<Blob> {\n    await this.loadFFmpeg();\n\n    \n    const data = await file.arrayBuffer();\n    this.ffmpeg.FS('writeFile', 'input.mp4', new Uint8Array(data));\n\n    \n    await this.ffmpeg.run('-i', 'input.mp4', '-ss', `${startTime}`, '-to', `${endTime}`, '-c', 'copy', 'output.mp4');\n\n    \n    const outputData = this.ffmpeg.FS('readFile', 'output.mp4');\n    const outputBlob = new Blob([outputData.buffer], { type: 'video/mp4' });\n    \n    return outputBlob;\n  }\n}\n\n\n\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}