{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/satyajitpujari/projects/ce6/tce-video-editor/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst resolveURL = require('resolve-url');\n\nconst readFromBlobOrFile = blob => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n\n  fileReader.onerror = ({\n    target: {\n      error: {\n        code\n      }\n    }\n  }) => {\n    reject(Error(`File could not be read! Code=${code}`));\n  };\n\n  fileReader.readAsArrayBuffer(blob);\n});\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (_data) {\n    let data = _data;\n\n    if (typeof _data === 'undefined') {\n      return new Uint8Array();\n    }\n\n    if (typeof _data === 'string') {\n      /* From base64 format */\n      if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(_data)) {\n        data = atob(_data.split(',')[1]).split('').map(c => c.charCodeAt(0));\n        /* From remote server/URL */\n      } else {\n        const res = yield fetch(resolveURL(_data));\n        data = yield res.arrayBuffer();\n      }\n      /* From Blob or File */\n\n    } else if (_data instanceof File || _data instanceof Blob) {\n      data = yield readFromBlobOrFile(_data);\n    }\n\n    return new Uint8Array(data);\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/satyajitpujari/projects/ce6/tce-video-editor/node_modules/@ffmpeg/ffmpeg/src/browser/fetchFile.js"],"names":["resolveURL","require","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","target","error","code","Error","readAsArrayBuffer","module","exports","_data","data","Uint8Array","test","atob","split","map","c","charCodeAt","res","fetch","arrayBuffer","File","Blob"],"mappings":";;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AAEA,MAAMC,kBAAkB,GAAIC,IAAD,IACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,EAAAA,UAAU,CAACE,MAAX,GAAoB,MAAM;AACxBJ,IAAAA,OAAO,CAACE,UAAU,CAACG,MAAZ,CAAP;AACD,GAFD;;AAGAH,EAAAA,UAAU,CAACI,OAAX,GAAqB,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA;AAAF;AAAT;AAAV,GAAD,KAAqC;AACxDR,IAAAA,MAAM,CAACS,KAAK,CAAE,gCAA+BD,IAAK,EAAtC,CAAN,CAAN;AACD,GAFD;;AAGAP,EAAAA,UAAU,CAACS,iBAAX,CAA6Bb,IAA7B;AACD,CATD,CADF;;AAaAc,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAOC,KAAP,EAAiB;AAChC,QAAIC,IAAI,GAAGD,KAAX;;AACA,QAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChC,aAAO,IAAIE,UAAJ,EAAP;AACD;;AAED,QAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,UAAI,yCAAyCG,IAAzC,CAA8CH,KAA9C,CAAJ,EAA0D;AACxDC,QAAAA,IAAI,GAAGG,IAAI,CAACJ,KAAK,CAACK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAJ,CACJA,KADI,CACE,EADF,EAEJC,GAFI,CAECC,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAFP,CAAP;AAGF;AACC,OALD,MAKO;AACL,cAAMC,GAAG,SAASC,KAAK,CAAC7B,UAAU,CAACmB,KAAD,CAAX,CAAvB;AACAC,QAAAA,IAAI,SAASQ,GAAG,CAACE,WAAJ,EAAb;AACD;AACH;;AACC,KAZD,MAYO,IAAIX,KAAK,YAAYY,IAAjB,IAAyBZ,KAAK,YAAYa,IAA9C,EAAoD;AACzDZ,MAAAA,IAAI,SAASlB,kBAAkB,CAACiB,KAAD,CAA/B;AACD;;AAED,WAAO,IAAIE,UAAJ,CAAeD,IAAf,CAAP;AACD,GAvBD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const resolveURL = require('resolve-url');\n\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\nmodule.exports = async (_data) => {\n  let data = _data;\n  if (typeof _data === 'undefined') {\n    return new Uint8Array();\n  }\n\n  if (typeof _data === 'string') {\n    /* From base64 format */\n    if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(_data)) {\n      data = atob(_data.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    /* From remote server/URL */\n    } else {\n      const res = await fetch(resolveURL(_data));\n      data = await res.arrayBuffer();\n    }\n  /* From Blob or File */\n  } else if (_data instanceof File || _data instanceof Blob) {\n    data = await readFromBlobOrFile(_data);\n  }\n\n  return new Uint8Array(data);\n};\n"]},"metadata":{},"sourceType":"script"}